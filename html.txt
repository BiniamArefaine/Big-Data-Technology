/////////////------------formatter------------///////////
@Configuration
    static class MyConfig extends WebMvcConfigurerAdapter {
        @Override
        public void addFormatters(FormatterRegistry registry) {
            registry.addFormatter(new PhoneFormatter());
        }
    }


//////////////--------////////

$(document).ready(function() {


	$("#studentForm").click(function (event) {
		console.log("i am at the event")
		event.preventDefault();

		let studentJSON = JSON.stringify($("#container").serializeFormJSON());
		console.log(studentJSON)
		$.ajax({
			type: "POST",
			url:"http://localhost:9090/student/addStudentForm",
			data: studentJSON,
			contentType: "application/json",
			dataType: "json",
			success: function (studentJSON) {
				$("#container")[0].reset();
				$("#solution").empty();
				$('#solution').append('<H3 align="center"> Great Good Job!! <H3><p>').show();

			},
			error: function (XMLHttpRequest, textStatus, errorThrown) {
				let errorObj = XMLHttpRequest.responseJSON;
				$("#solution").empty();
				if (errorObj.errorType === 'ValidationError') {

					let errorArray = errorObj.fieldErrors;
					let errorMessage = '<h3> Error(s)!! </h3>';
					errorMessage += "<p>";

					$.each(errorArray, function (index, e) {
						errorMessage = errorMessage + e.field + " : " + e.message + '<br>';
					});
					errorMessage += "</p>";

					$('#solution').append(errorMessage);
					$('#solution').show();

				} else {
					alert(" this error is not happen due to other error but not due to Validation error ")
				}


			}
		});

	});
});


/////////////////------table list-------//////////

<div style="font-size: 1em">
        <table class="table table-striped">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">Email</th>
                <th scope="col">Role</th>
                <th scope="col">Licence Number</th>
                <th scope="col"> </th>
            </tr>
            </thead>
            <tbody>
            <tr th:each="usersList,iterStat : ${listUsers}">
                <th scope="row" th:text="${iterStat.count}+${'.'}"></th>
                <td th:text="${usersList.firstName}"></td>
                <td th:text="${usersList.lastName}"></td>
                <td th:text="${usersList.email}"></td>
                <td th:text="${usersList.role.name}"></td>
                <td th:text="${usersList.licenceNumber}"></td>
                <td><a th:href="@{'/user/verify/' +  ${usersList.id}}">Verify</a></td>
                <td>
                    <a  data-target="#confirmDeleteProductModal"
                        th:href="@{'/user/delete/' + ${usersList.id}}">Delete</a>
                </td>
<!--                <td><a  class="btn btn-outline-success btn-lg"  th:if="${product.isShipped()}">Shipped</a>-->
<!--                    <a  class="btn btn-outline-success btn-lg"  th:href="@{'ship/{id}'(id=${product.id})}" th:unless="${product.isShipped()}">Make Shipment</a>-->
<!--                </td>-->
            </tr>

/////////////////------Select-------//////////

 <select th:field="*{address}" size="3" multiple="multiple">
            <option th:each="address : ${address}"
                    th:value="${{address}}"
                    th:text="${address.city}">
            </option>
        </select>

//////////////----------------//////////////



$(document).ready(function() {


	$("#studentForm").click(function (event) {
		console.log("i am at the event")
		event.preventDefault();

		let studentJSON = JSON.stringify($("#container").serializeFormJSON());
		console.log(studentJSON)
		$.ajax({
			type: "POST",
			url:"http://localhost:9090/student/addStudentForm",
			data: studentJSON,
			contentType: "application/json",
			dataType: "json",
			success: function (studentJSON) {
				$("#container")[0].reset();
				$("#solution").empty();
				$('#solution').append('<H3 align="center"> Great Good Job!! <H3><p>').show();

			},
			error: function (XMLHttpRequest, textStatus, errorThrown) {
				let errorObj = XMLHttpRequest.responseJSON;
				$("#solution").empty();
				if (errorObj.errorType === 'ValidationError') {

					let errorArray = errorObj.fieldErrors;
					let errorMessage = '<h3> Error(s)!! </h3>';
					errorMessage += "<p>";

					$.each(errorArray, function (index, e) {
						errorMessage = errorMessage + e.field + " : " + e.message + '<br>';
					});
					errorMessage += "</p>";

					$('#solution').append(errorMessage);
					$('#solution').show();

				} else {
					alert(" this error is not happen due to other error but not due to Validation error ")
				}


			}
		});

	});
});


/////////////////

<div style="font-size: 1em">
        <table class="table table-striped">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">Email</th>
                <th scope="col">Role</th>
                <th scope="col">Licence Number</th>
                <th scope="col"> </th>
            </tr>
            </thead>
            <tbody>
            <tr th:each="usersList,iterStat : ${listUsers}">
                <th scope="row" th:text="${iterStat.count}+${'.'}"></th>
                <td th:text="${usersList.firstName}"></td>
                <td th:text="${usersList.lastName}"></td>
                <td th:text="${usersList.email}"></td>
                <td th:text="${usersList.role.name}"></td>
                <td th:text="${usersList.licenceNumber}"></td>
                <td><a th:href="@{'/user/verify/' +  ${usersList.id}}">Verify</a></td>
                <td>
                    <a  data-target="#confirmDeleteProductModal"
                        th:href="@{'/user/delete/' + ${usersList.id}}">Delete</a>
                </td>
<!--                <td><a  class="btn btn-outline-success btn-lg"  th:if="${product.isShipped()}">Shipped</a>-->
<!--                    <a  class="btn btn-outline-success btn-lg"  th:href="@{'ship/{id}'(id=${product.id})}" th:unless="${product.isShipped()}">Make Shipment</a>-->
<!--                </td>-->
            </tr>

/////////------FieldErrorDTO--------////////

package com.example.finalone.exception;


public class FieldErrorDTO {
	private String field;

	private String message;

	public FieldErrorDTO(String field, String message) {
		this.field = field;
		this.message = message;
	}

	public String getField() {
		return field;
	}

	public void setField(String field) {
		this.field = field;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	@Override
	public String toString() {
		return "FieldErrorDTO [field=" + field + ", message=" + message + "]";
	}

}
/////////////--------resterrorhandler----------/////////

package com.example.finalone.exception;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.List;

@ControllerAdvice
public class RestErrorHandler {

	@Autowired
	private MessageSource messageSource;



	@ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ResponseBody
	public ValidationErrorDTO processValidationError(MethodArgumentNotValidException ex) {
		BindingResult result = ex.getBindingResult();
		List<FieldError> fieldErrors = result.getFieldErrors();
		return processFieldErrors(fieldErrors);
	}

	private ValidationErrorDTO processFieldErrors(List<FieldError> fieldErrors) {
		ValidationErrorDTO dto = new ValidationErrorDTO("ValidationError");

		for (FieldError fieldError : fieldErrors) {
			dto.addFieldError(fieldError.getField(), fieldError.getDefaultMessage());
		}
		return dto;
	}



}
////////////////--------validationErrorDTO----------//////////////
package com.example.finalone.exception;

import java.util.ArrayList;
import java.util.List;


public class ValidationErrorDTO {
	private String errorType;
	private List<FieldErrorDTO> fieldErrors = new ArrayList<>();

	public ValidationErrorDTO() {

	}

	public ValidationErrorDTO(String errorType) {
		this.errorType = errorType;
	}

	public void addFieldError(String path, String errors) {
		FieldErrorDTO error = new FieldErrorDTO(path,errors);
		fieldErrors.add(error);
	}

	public String getErrorType() {
		return errorType;
	}

	public void setErrorType(String errorType) {
		this.errorType = errorType;
	}

	public List<FieldErrorDTO> getFieldErrors() {
		return fieldErrors;
	}

	public void setFieldErrors(List<FieldErrorDTO> fieldErrors) {
		this.fieldErrors = fieldErrors;
	}

}



